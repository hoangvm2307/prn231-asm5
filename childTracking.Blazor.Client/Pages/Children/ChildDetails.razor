@page "/Children/Details/{ChildId:guid}"
@using childTracking.Blazor.Client.Models
@using childTracking.Blazor.Client.GraphQLClient
@inject NavigationManager NavigationManager

<div class="container mt-4">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Đang tải...</span>
            </div>
        </div>
    }
    else if (child == null)
    {
        <div class="alert alert-warning">
            <h4>Không tìm thấy thông tin trẻ</h4>
            <p>Không thể tìm thấy thông tin cho trẻ có ID: @ChildId</p>
            <button class="btn btn-primary" @onclick="GoBack">Quay lại danh sách</button>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3>Thông tin chi tiết: @child.FullName</h3>
                <div>
                    <button class="btn btn-warning me-2" @onclick="() => EditChild(child.ChildId)">
                        <i class="oi oi-pencil"></i> Chỉnh sửa
                    </button>
                    <button class="btn btn-primary" @onclick="GoBack">Quay lại danh sách</button>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h5>Thông tin cơ bản</h5>
                        <table class="table table-borderless">
                            <tbody>
                                <tr>
                                    <th style="width: 30%">Họ và tên:</th>
                                    <td>@child.FullName</td>
                                </tr>
                                <tr>
                                    <th>Ngày sinh:</th>
                                    <td>@child.DateOfBirth.ToShortDateString() (@CalculateAge(child.DateOfBirth) tuổi)</td>
                                </tr>
                                <tr>
                                    <th>Giới tính:</th>
                                    <td>@child.Gender</td>
                                </tr>
                                <tr>
                                    <th>Nhóm máu:</th>
                                    <td>@(string.IsNullOrEmpty(child.BloodType) ? "Chưa có thông tin" : child.BloodType)</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h5>Thông tin y tế</h5>
                        <table class="table table-borderless">
                            <tbody>
                                <tr>
                                    <th style="width: 30%">Tình trạng y tế:</th>
                                    <td>@(string.IsNullOrEmpty(child.MedicalConditions) ? "Không có" : child.MedicalConditions)</td>
                                </tr>
                                <tr>
                                    <th>Dị ứng:</th>
                                    <td>@(string.IsNullOrEmpty(child.Allergies) ? "Không có" : child.Allergies)</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                @if (child.GrowthRecords != null && child.GrowthRecords.Any())
                {
                    <div class="mt-4">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5>Lịch sử phát triển</h5>
                            <button class="btn btn-sm btn-success mb-2" @onclick="AddGrowthRecord">
                                <i class="oi oi-plus"></i> Thêm ghi nhận mới
                            </button>
                        </div>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Ngày đo</th>
                                    <th>Chiều cao (cm)</th>
                                    <th>Cân nặng (kg)</th>
                                    <th>BMI</th>
                                    <th>Chu vi đầu (cm)</th>
                                    <th>Người đo</th>
                                    <th>Trạng thái</th>
                                    <th>Ghi chú</th>
                                    <th>Thao tác</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var record in child.GrowthRecords.OrderByDescending(r => r.MeasurementDate))
                                {
                                    <tr>
                                        <td>@record.MeasurementDate.ToShortDateString()</td>
                                        <td>@record.Height</td>
                                        <td>@record.Weight</td>
                                        <td>@record.Bmi</td>
                                        <td>@record.HeadCircumference</td>
                                        <td>@(string.IsNullOrEmpty(record.MeasuredBy) ? "Không có" : record.MeasuredBy)</td>
                                        <td>@record.Status</td>
                                        <td>@(string.IsNullOrEmpty(record.Notes) ? "Không có" : record.Notes)</td>
                                        <td>
                                            <button class="btn btn-sm btn-warning me-1" @onclick="() => EditGrowthRecord(record.RecordId)">
                                                <i class="oi oi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteGrowthRecordConfirm(record)">
                                                <i class="oi oi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-info mt-4">
                        <div class="d-flex justify-content-between align-items-center">
                            <p class="mb-0">Chưa có dữ liệu phát triển nào được ghi nhận.</p>
                            <button class="btn btn-sm btn-success" @onclick="AddGrowthRecord">
                                <i class="oi oi-plus"></i> Thêm ghi nhận mới
                            </button>
                        </div>
                    </div>
                }

                <div class="mt-4">
                    <h5>Ghi chú</h5>
                    <div class="p-3 bg-light rounded">
                        @(string.IsNullOrEmpty(child.Notes) ? "Không có ghi chú" : child.Notes)
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="d-flex justify-content-between">
                    <button class="btn btn-danger" @onclick="() => DeleteConfirm(child)">
                        <i class="oi oi-trash"></i> Xóa thông tin
                    </button>
                    <div>
                        <button class="btn btn-warning me-2" @onclick="() => EditChild(child.ChildId)">
                            <i class="oi oi-pencil"></i> Chỉnh sửa
                        </button>
                        <button class="btn btn-primary" @onclick="GoBack">Quay lại danh sách</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showDeleteConfirm)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title">Xác nhận xóa</h5>
                        <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                    </div>
                    <div class="modal-body">
                        <p>Bạn có chắc chắn muốn xóa thông tin trẻ <strong>@childToDelete?.FullName</strong>?</p>
                        <p><small class="text-danger">Lưu ý: Hành động này không thể hoàn tác và sẽ xóa tất cả dữ liệu liên quan!</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Hủy</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Xóa</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    @if (showDeleteGrowthRecordConfirm)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title">Xác nhận xóa ghi nhận tăng trưởng</h5>
                        <button type="button" class="btn-close" @onclick="CancelDeleteGrowthRecord"></button>
                    </div>
                    <div class="modal-body">
                        <p>Bạn có chắc chắn muốn xóa ghi nhận tăng trưởng này?</p>
                        <p><small class="text-danger">Lưu ý: Hành động này không thể hoàn tác!</small></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelDeleteGrowthRecord">Hủy</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteGrowthRecord">Xóa</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    [Parameter]
    public Guid ChildId { get; set; }

    private Child? child;

    private bool isLoading = true;
    private bool showDeleteConfirm = false;
    private bool showDeleteGrowthRecordConfirm = false;
    private Child? childToDelete;
    private GrowthRecord? growthRecordToDelete;

    // Khởi tạo GraphQLConsumer
    private GraphQLConsumer _graphQLConsumer = new GraphQLConsumer();

    protected override async Task OnInitializedAsync()
    {
        await LoadChildData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadChildData();
    }

    private async Task LoadChildData()
    {
        isLoading = true;

        try
        {
            // Sử dụng GraphQLConsumer để lấy thông tin chi tiết
            child = await _graphQLConsumer.GetChildById(ChildId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tải dữ liệu từ GraphQL: {ex.Message}");
            child = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/Children/ChildList");
    }

    private void EditChild(Guid childId)
    {
        NavigationManager.NavigateTo($"/Children/Edit/{childId}");
    }

    private void AddGrowthRecord()
    {
        NavigationManager.NavigateTo($"/GrowthRecords/Create/{ChildId}");
    }

    private void EditGrowthRecord(Guid recordId)
    {
        NavigationManager.NavigateTo($"/GrowthRecords/Edit/{recordId}");
    }

    private void DeleteGrowthRecordConfirm(GrowthRecord record)
    {
        growthRecordToDelete = record;
        showDeleteGrowthRecordConfirm = true;
    }

    private void CancelDeleteGrowthRecord()
    {
        showDeleteGrowthRecordConfirm = false;
        growthRecordToDelete = null;
    }

    private async Task ConfirmDeleteGrowthRecord()
    {
        if (growthRecordToDelete != null)
        {
            try
            {
                // TODO: Thay thế bằng GraphQL mutation khi có sẵn
                // var success = await _graphQLConsumer.DeleteGrowthRecord(growthRecordToDelete.RecordId);

                // Tạm thời giữ nguyên cách cũ
                /*
                var response = await httpClient.DeleteAsync($"https://localhost:7066/api/GrowthRecord/{growthRecordToDelete.RecordId}");

                if (response.IsSuccessStatusCode)
                {
                    await LoadChildData();
                }
                else
                {
                    Console.WriteLine($"Lỗi khi xóa ghi nhận tăng trưởng: {response.StatusCode}");
                }
                */

                // Tải lại dữ liệu
                await LoadChildData();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Lỗi khi xóa ghi nhận tăng trưởng: {ex.Message}");
            }
        }

        showDeleteGrowthRecordConfirm = false;
        growthRecordToDelete = null;
    }

    private void DeleteConfirm(Child child)
    {
        childToDelete = child;
        showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
        childToDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (childToDelete != null)
        {
            try
            {
                // Sử dụng GraphQLConsumer để xóa
                bool success = await _graphQLConsumer.DeleteChild(childToDelete.ChildId);

                if (success)
                {
                    NavigationManager.NavigateTo("/Children/ChildList");
                }
                else
                {
                    Console.WriteLine("Xóa thất bại do lỗi từ GraphQL API");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Lỗi khi xóa: {ex.Message}");
            }
        }

        showDeleteConfirm = false;
        childToDelete = null;
    }

    private int CalculateAge(DateTime birthDate)
    {
        var today = DateTime.Today;
        var age = today.Year - birthDate.Year;

        // Trừ đi 1 năm nếu ngày sinh trong năm nay chưa đến
        if (birthDate.Date > today.AddYears(-age))
            age--;

        return age;
    }
}