@page "/Children/Create"
@using childTracking.Blazor.Client.Models
@using childTracking.Blazor.Client.GraphQLClient
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3>Thêm mới thông tin trẻ em</h3>
            <button class="btn btn-secondary" @onclick="GoBack">Quay lại danh sách</button>
        </div>
        <div class="card-body">
            <EditForm Model="@child" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">
                        @errorMessage
                    </div>
                }

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <div class="form-group">
                            <label for="fullName" class="form-label">Họ và tên <span class="text-danger">*</span></label>
                            <InputText id="fullName" class="form-control" @bind-Value="child.FullName" />
                            <ValidationMessage For="@(() => child.FullName)" />
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="form-group">
                            <label for="dateOfBirth" class="form-label">Ngày sinh <span class="text-danger">*</span></label>
                            <InputDate id="dateOfBirth" class="form-control" @bind-Value="child.DateOfBirth" />
                            <ValidationMessage For="@(() => child.DateOfBirth)" />
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <div class="form-group">
                            <label for="gender" class="form-label">Giới tính <span class="text-danger">*</span></label>
                            <InputSelect id="gender" class="form-select" @bind-Value="child.Gender">
                                <option value="">-- Chọn giới tính --</option>
                                <option value="Nam">Nam</option>
                                <option value="Nữ">Nữ</option>
                                <option value="Khác">Khác</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => child.Gender)" />
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="form-group">
                            <label for="bloodType" class="form-label">Nhóm máu</label>
                            <InputSelect id="bloodType" class="form-select" @bind-Value="child.BloodType">
                                <option value="">-- Chọn nhóm máu --</option>
                                <option value="A+">A+</option>
                                <option value="A-">A-</option>
                                <option value="B+">B+</option>
                                <option value="B-">B-</option>
                                <option value="AB+">AB+</option>
                                <option value="AB-">AB-</option>
                                <option value="O+">O+</option>
                                <option value="O-">O-</option>
                            </InputSelect>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <div class="form-group">
                            <label for="medicalConditions" class="form-label">Tình trạng y tế</label>
                            <InputTextArea id="medicalConditions" class="form-control" @bind-Value="child.MedicalConditions" rows="3" />
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="form-group">
                            <label for="allergies" class="form-label">Dị ứng</label>
                            <InputTextArea id="allergies" class="form-control" @bind-Value="child.Allergies" rows="3" />
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <div class="form-group">
                        <label for="notes" class="form-label">Ghi chú</label>
                        <InputTextArea id="notes" class="form-control" @bind-Value="child.Notes" rows="4" />
                    </div>
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <button type="button" class="btn btn-secondary" @onclick="GoBack">Hủy</button>
                    <button type="submit" class="btn btn-primary" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                            <span>Đang lưu...</span>
                        }
                        else
                        {
                            <span>Lưu thông tin</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private Child child = new Child
        {
            ChildId = Guid.NewGuid(),
            DateOfBirth = DateTime.Today.AddYears(-1),
            CreatedAt = DateTime.Now
        };

    private bool isSaving = false;
    private string errorMessage = string.Empty;

    // Khởi tạo GraphQLConsumer
    private GraphQLConsumer _graphQLConsumer = new GraphQLConsumer();

    private void GoBack()
    {
        NavigationManager.NavigateTo("/Children/ChildList");
    }

    private async Task HandleValidSubmit()
    {
        isSaving = true;
        errorMessage = string.Empty;

        try
        {
            // Sử dụng GraphQLConsumer để tạo trẻ mới
            var createdChild = await _graphQLConsumer.CreateChild(child);

            if (createdChild != null)
            {
                NavigationManager.NavigateTo("/Children/ChildList");
            }
            else
            {
                errorMessage = "Không thể tạo thông tin trẻ. Vui lòng thử lại sau.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi gửi dữ liệu: {ex.Message}";
            Console.WriteLine(errorMessage);
            if (ex.InnerException != null)
            {
                Console.WriteLine($"Inner Exception: {ex.InnerException.Message}");
            }
        }
        finally
        {
            isSaving = false;
        }
    }
}