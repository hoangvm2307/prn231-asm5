// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

namespace ChildTracking.Repositories.Models
{
    public partial class ChildCheckerContext : DbContext
    {
        public ChildCheckerContext()
        {
        }

        public ChildCheckerContext(DbContextOptions<ChildCheckerContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Child> Children { get; set; }
        public virtual DbSet<GrowthRecord> GrowthRecords { get; set; }
        public virtual DbSet<UserAccount> UserAccounts { get; set; }

        public static string GetConnectionString(string connectionStringName)
        {
            var config = new ConfigurationBuilder()
                .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
                .AddJsonFile("appsettings.json")
                .Build();

            string connectionString = config.GetConnectionString(connectionStringName);
            return connectionString;
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Child>(entity =>
            {
                entity.Property(e => e.ChildId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Allergies).HasMaxLength(500);

                entity.Property(e => e.BloodType).HasMaxLength(5);

                entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateOfBirth).HasColumnType("date");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Gender)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.MedicalConditions).HasMaxLength(500);

                entity.Property(e => e.Notes).HasMaxLength(1000);
            });

            modelBuilder.Entity<GrowthRecord>(entity =>
            {
                entity.HasKey(e => e.RecordId)
                    .HasName("PK__GrowthRe__FBDF78E95526542C");

                entity.Property(e => e.RecordId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Bmi)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("BMI");

                entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HeadCircumference).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Height).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.MeasuredBy).HasMaxLength(100);

                entity.Property(e => e.MeasurementDate).HasColumnType("date");

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('active')");

                entity.Property(e => e.Weight).HasColumnType("decimal(5, 2)");

                entity.HasOne(d => d.Child)
                    .WithMany(p => p.GrowthRecords)
                    .HasForeignKey(d => d.ChildId)
                    .HasConstraintName("FK__GrowthRec__Child__619B8048");
            });

            modelBuilder.Entity<UserAccount>(entity =>
            {
                entity.ToTable("UserAccount");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.Property(e => e.ApplicationCode).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.EmployeeCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RequestCode).HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}